{"version":3,"sources":["containers/img.jpg","components/searchBar.js","components/ImageRslt.js","components/VideoRslt.js","components/AudioRslt.js","components/ResultList.js","containers/Search.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","divStyle","textTransform","fontWeight","SearchBar","props","react_default","a","createElement","className","type","onChange","takeInput","id","aria-describedby","style","onClick","btImageClick","btAudioClick","ImageRslt","src","alt","VideoRslt","controls","name","poster","thumbnail","url","AudioRslt","ResultList","data","clsname","searchfor","imagedata","map","ele","components_ImageRslt","images","original","console","log","audiodata","kind","components_AudioRslt","artistId","previewUrl","artworkUrl100","components_VideoRslt","length","Search","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","searchTxtValue","state","searchValue","_this2","concat","fetch","then","response","json","result","setState","catch","err","_this3","results","event","target","value","fetchImageData","fetchAudioData","href","logo","width","height","bind","searchImages","searchAudio","components_ResultList","React","Component","App","Search_Search","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.18ed4ac1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/img.138a1e00.jpg\";","import React from 'react';\r\nconst divStyle={\r\n    // texttransform: 'uppercase'\r\n    textTransform: 'capitalize',\r\n    fontWeight: 'lighter'\r\n}\r\nexport default function SearchBar(props){return(\r\n    <div className=\"input-group shadow-sm p-3 mb-5 bg-white rounded\">\r\n        <input type=\"text\" onChange={props.takeInput} className=\"form-control shadow-none bg-light\" id=\"searchbar\" aria-describedby=\"searchbar\" style={divStyle}/>\r\n        <div className=\"input-group-append\">\r\n        <button onClick={props.btImageClick} className=\"btn btn-secondary shadow-sm\" type=\"button\" id=\"searchbtn\">Search Images</button>\r\n        <button onClick={props.btAudioClick} className=\"btn btn-info shadow-sm\" type=\"button\" id=\"searchbtn\">Search Audio/Video</button>\r\n        </div>\r\n    </div>\r\n)}","import React from 'react';\r\nconst ImageRslt=(props)=>(<img src={props.src} alt=\"random\" className=\"image-thumbnail\"></img>);\r\nexport default ImageRslt; ","import React from 'react';\r\nconst VideoRslt=(props)=>{return(\r\n<div className=\"item\">\r\n    <video controls name=\"media\" poster={props.thumbnail}>\r\n        <source src={props.url} type=\"video/x-m4v\"/>\r\n    </video>\r\n</div>\r\n);}\r\nexport default VideoRslt; ","import React from 'react';\r\nconst AudioRslt=(props)=>{return(\r\n<div className=\"item\">\r\n    <img src={props.thumbnail} alt=\"thumbnailart\" className=\"v-t\"/> \r\n    <audio controls name=\"media\">\r\n        <source src={props.url} type=\"audio/x-m4a\"/>\r\n    </audio>\r\n</div>\r\n);}\r\nexport default AudioRslt; ","import React from 'react';\r\nimport ImageRslt from './ImageRslt';\r\nimport VideoRslt from './VideoRslt'\r\nimport AudioRslt from './AudioRslt';\r\nconst ResultList=(props)=>{\r\n    var data=<p>Search something!</p>;\r\n    let clsname='text-center';\r\n    if(props.searchfor===\"img\"){\r\n        data = props.imagedata.map(ele=><ImageRslt id={ele.id} src={ele.images.original.url}/>);\r\n        console.log('image block');\r\n        clsname=\"masonry\"\r\n    }else if(props.searchfor===\"av\"){\r\n        data = props.audiodata.map(function(ele){\r\n            if(ele.kind===\"song\"){\r\n                return <AudioRslt id={ele.artistId} url={ele.previewUrl} thumbnail={ele.artworkUrl100}/>;\r\n            }else{\r\n                return <VideoRslt id={ele.artistId} url={ele.previewUrl} thumbnail={ele.artworkUrl100}/>\r\n            }\r\n        });\r\n        console.log('audio block');\r\n        clsname=\"masonry-video-audio\"\r\n    }\r\n    return(\r\n    <div className=\"col-lg-12\">\r\n        <div className={clsname}>\r\n            {data.length===0?<p>Sorry There is no result found!</p>:data}\r\n        </div>\r\n    </div>\r\n);}\r\nexport default ResultList;","import React from 'react';\r\nimport logo from './img.jpg';\r\nimport SearchBar from '../components/searchBar';\r\nimport ResultList from '../components/ResultList';\r\nexport default class Search extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.searchTxtValue=\"\";\r\n        this.searchfor=\"none\";\r\n        this.state={imagedata:[],audiodata:[]};\r\n    }\r\n    fetchImageData(searchValue){\r\n        const url = `https://api.giphy.com/v1/gifs/search?api_key=F5lCo3u9cOV3oLzpjGzR9FcWc7joeLXT&q=${searchValue}&limit=20`;\r\n        const promise = fetch(url);\r\n        promise.then(response=>{\r\n            var p= response.json();\r\n            p.then(result=>{\r\n                this.setState({imagedata:result.data});\r\n            }).catch(err=>{\r\n                console.log('There is error in JSON Fetching::',err);\r\n            }).catch(err=>{\r\n                console.log('There is some error in data fetching::',err);\r\n            })\r\n        })\r\n    }\r\n    fetchAudioData(searchValue){\r\n        const url =`https://itunes.apple.com/search?term=${searchValue}&limit=20`;\r\n        const promise = fetch(url);\r\n        promise.then(response=>{\r\n            var pr=response.json();\r\n            pr.then(result=>{\r\n                this.setState({audiodata:result.results});\r\n                console.log('result is coming',result.results);\r\n            }).catch(err=>{\r\n                console.log('There is error in JSON Fetching::',err);\r\n            }).catch(err=>{\r\n                console.log('There is some error in data fetching::',err);\r\n            })\r\n        })    \r\n    }\r\n    takeInput(event){\r\n        let data = event.target.value\r\n        this.searchTxtValue = data;\r\n    }    \r\n    searchImages(){\r\n        this.searchfor=\"img\";\r\n        this.fetchImageData(this.searchTxtValue);\r\n    }\r\n    searchAudio(){\r\n            this.searchfor=\"av\";\r\n            this.fetchAudioData(this.searchTxtValue); \r\n    }           \r\n    render(){\r\n        return (\r\n            <div className=\"col-lg-12 text-muted text-center p-4\">\r\n                <a href=\"http://localhost:3000/\" id=\"bottle\" >\r\n                    <img src={logo} alt=\"Search Engine\" width=\"350\" height=\"350\" />\r\n                </a>\r\n                <SearchBar takeInput={this.takeInput.bind(this)} btImageClick={this.searchImages.bind(this)} btAudioClick={this.searchAudio.bind(this)}/>\r\n                <ResultList imagedata={this.state.imagedata} audiodata={this.state.audiodata} searchfor={this.searchfor}/>\r\n            </div>\r\n        )\r\n\r\n    }\r\n}","import React from 'react';\nimport './App.css'\nimport Search from './containers/Search';\nfunction App(props) {\n    return (<div className=\"row\">\n      <Search/>\n    </div>);\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}